{"version":3,"sources":["serviceWorker.js","firebase.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","state","currentItem","username","items","handleChange","bind","handleSubmit","e","this","setState","target","name","value","preventDefault","itemsRef","database","ref","item","title","user","timestamp","Date","now","score","push","orderByChild","on","snapshot","val","newState","id","itemId","remove","itemScore","newScore","update","className","Navbar","bg","Brand","Container","Card","onSubmit","Form","Control","type","placeholder","onChange","as","disabled","selected","class","CardColumns","map","text","key","Header","Badge","variant","Body","onClick","voteUp","voteDown","removeItem","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e22ef1a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase'\r\nconst config = {\r\n  apiKey: \"AIzaSyDy8oRuRS0PYlKWHpe5or-Yow5ME14GUzk\",\r\n  authDomain: \"things-you-should-know-f4f65.firebaseapp.com\",\r\n  databaseURL: \"https://things-you-should-know-f4f65.firebaseio.com\",\r\n  projectId: \"things-you-should-know-f4f65\",\r\n  storageBucket: \"things-you-should-know-f4f65.appspot.com\",\r\n  messagingSenderId: \"397488562791\",\r\n  appId: \"1:397488562791:web:d15d1be5dad4c71e8a2ac2\"\r\n};\r\nfirebase.initializeApp(config);\r\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\n\n/*Bootstrap*/\nimport Button from \"react-bootstrap/Button\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\"\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Badge from \"react-bootstrap/Badge\";\n/*End Bootstrap*/\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: '',\n      username: '',\n      items: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    const itemsRef = firebase.database().ref('items');\n    const item = {\n      title: this.state.currentItem,\n      user: this.state.username,\n      timestamp: Date.now(),\n      score: 1\n    }\n    itemsRef.push(item);\n    this.setState({\n      currentItem: '',\n      username: ''\n    });\n  }\n  componentDidMount() {\n    const itemsRef = firebase.database().ref('items').orderByChild('score');\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user,\n          score: items[item].score\n        });\n      }\n      this.setState({\n        items: newState\n      });\n    });\n  }\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n  voteUp(itemId, itemScore) {\n    const newScore = itemScore+1;\n    return firebase.database().ref(`/items/${itemId}`).update({score:newScore});\n  }\n  voteDown(itemId, itemScore) {\n    const newScore = itemScore-1;\n    return firebase.database().ref(`/items/${itemId}`).update({score:newScore});\n  }\n  render() {\n    return (\n      <div className='app'>\n        <Navbar bg='light'>\n              <Navbar.Brand>Things you should know</Navbar.Brand>           \n        </Navbar>\n        <Container>\n          <Card className='add-item' bg='dark'>\n                <form onSubmit={this.handleSubmit}>\n                  <Form.Control type=\"text\" name=\"currentItem\" placeholder=\"What should everyone know?\" onChange={this.handleChange} value={this.state.currentItem} />\n                  {/*<Form.Control type=\"text\" name=\"username\" placeholder=\"What's your name?\" onChange={this.handleChange} value={this.state.username} />*/}\n                  <Form.Control as=\"select\">\n                    <option value=\"\" disabled selected>Category</option>\n                    <option>Health</option>\n                    <option>Relationships</option>\n                    <option>Learning</option>\n                  </Form.Control>\n                  <button class='del'>Add Item</button>\n                </form>\n          </Card>\n          <CardColumns>\n                  {this.state.items.map((item) => {\n                    return (\n                      <Card bg='info' text='light'>\n                      <div key={item.id}>\n                        <Card.Header><Badge variant='light'>{item.score}</Badge> {item.title}</Card.Header>\n                        <Card.Body>\n                          <button class='del' onClick={() => this.voteUp(item.id, item.score)}>+</button>\n                          <button class='del' onClick={() => this.voteDown(item.id, item.score)}>-</button>\n                          <button class='del' onClick={() => this.removeItem(item.id)}>Delete</button>\n                        </Card.Body>\n                      </div>\n                      </Card>\n                    )\n                  })}\n          </CardColumns>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n/* Custom Components */\nimport App from './App';\n/* Custom Components */\n\n/*Bootstrap*/\nimport \"./bootstrap.min.css\";\n\n/*End Bootstrap*/\n\nimport './App.css';\n\nfunction Welcome(props) {\n  return <h2>Hello, {props.name}</h2>;\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}